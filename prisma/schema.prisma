// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

model Organization {
    id String @id @default(cuid())
    users User[]
    name String?
    description String?
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    apiKeys ApiKey[]
    worklog Worklog[]
    roles Role[]
    pricelists Pricelist[]
    projects Project[]
    teamSchemes TeamScheme[]
    jiraEmployees JiraEmployee[]
    invoices Invoice[]
    issueInvoices IssueInvoice[]
    issueTimeItems IssueTimeItem[]
    timeItems TimeItem[]
    fixedPriceTimeItem FixedPriceTimeItem[]
    clients Client[]
    taxes Tax[]
    discounts Discount[]
    fixedPriceDiscounts FixedPriceDiscount[]
    invoiceLayouts InvoiceLayout[]
    xeroAuthenticationKeyId String?
    xeroAuthenticationKey XeroAuthenticationKey? @relation(fields: [xeroAuthenticationKeyId], references: [id])
    currency Currency @default(USD)
    roundingScheme RoundingScheme @default(POINTPOINT)
}

model ApiKey {
    id String @id @default(cuid())
    provider String // e.g E-conomic
    key String // e.g. economic-api-key
    value String // e.g. jsj3hdo3eds0
    organizationId String
    organization Organization @relation(fields: [organizationId], references: [id])
    @@unique(fields: [provider, key, organizationId], name: "organizationsApiKey")
}

model Worklog {
  id String @id @default(cuid())
  worklogId String
  issueId String
  hours Decimal
  started DateTime
  billed Boolean?
  billedDate DateTime?
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  @@unique(fields: [worklogId, organizationId], name: "organizationsWorklog")
}

// Roles and pricelists
model Role {
  name String @id @unique
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  pricelists RolesOnPricelists[]
  jiraEmployees JiraEmployee[]
  teamSchemes TeamScheme[]
}

model Pricelist {
  name String @id @unique
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  roles RolesOnPricelists[]
}

model RolesOnPricelists {
  role       Role     @relation(fields: [roleName], references: [name])
  roleName     String
  pricelist   Pricelist @relation(fields: [pricelistName], references: [name])
  pricelistName String
  hourlyRate Decimal
  @@id([roleName, pricelistName])
}

model Project {
  key String
  name String
  billable Boolean
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  @@unique([key, organizationId])
}

// Team schemes
// A team scheme can have multiple roles, and a role can have multiple employees (implicit many-to-many)
// A role can have multiple employees, and an employee can have multiple roles (implicit many-to-many)
model TeamScheme {
  id String @id @default(cuid())
  name String
  roles Role[]
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
}

model JiraEmployee {
  id String @id @default(cuid())
  name String
  accountId String
  roles Role[]
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  @@unique ([accountId, organizationId], name: "organizationsJiraEmployee")
}

model Client {
  id String @id @default(cuid())
  name String
  invoice Invoice[]
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  @@unique ([name, organizationId], name: "organizationsClient")
}

// Invoices
model TimeItem {
  id String @id @default(cuid())
  name String
  time Decimal
  hourlyWage Decimal
  invoiceId String
  invoice Invoice @relation(fields: [invoiceId], references: [id])
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  taxId String
  tax Tax @relation(fields: [taxId], references: [id])
  discountId String
  discount Discount @relation(fields: [discountId], references: [id])
  fixedPriceDiscountId String
  fixedPriceDiscount FixedPriceDiscount @relation(fields: [fixedPriceDiscountId], references: [id])
}

model FixedPriceTimeItem {
  id String @id @default(cuid())
  name String
  amount Decimal
  invoiceId String
  invoice Invoice @relation(fields: [invoiceId], references: [id])
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  taxId String
  tax Tax @relation(fields: [taxId], references: [id])
  discountId String
  discount Discount @relation(fields: [discountId], references: [id])
  fixedPriceDiscountId String
  fixedPriceDiscount FixedPriceDiscount @relation(fields: [fixedPriceDiscountId], references: [id])
}

model Tax {
  id String @id @default(cuid())
  name String
  percent Decimal
  invoiceId String
  invoice Invoice @relation(fields: [invoiceId], references: [id])
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  appliesToTimeItems TimeItem[]
  appliesToFixedPriceTimeItems FixedPriceTimeItem[]
}

model Discount {
  id String @id @default(cuid())
  name String
  percent Decimal
  invoiceId String
  invoice Invoice @relation(fields: [invoiceId], references: [id])
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  appliesToTimeItems TimeItem[]
  appliesToFixedPriceTimeItems FixedPriceTimeItem[]
}

model FixedPriceDiscount {
  id String @id @default(cuid())
  name String
  amount Decimal
  invoiceId String
  invoice Invoice @relation(fields: [invoiceId], references: [id])
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  appliesToTimeItems TimeItem[]
  appliesToFixedPriceTimeItems FixedPriceTimeItem[]
}

enum Currency {
  USD
  DKK
}

enum Language {
  DANISH
  ENGLISH
}

model NumberAndDateFormat {
  format String @id @unique
  invoiceLayout InvoiceLayout[]
}

model InvoiceLayout {
  id String @id @default(cuid())
  name String
  companyName String
  companyDetails String
  companyLogo String // TODO: add to S3 bucket
  language Language @default(ENGLISH)
  format String
  numberAndDateFormat NumberAndDateFormat @relation(fields: [format], references: [format])
  showTimeReport Boolean
  timeReportGroupings String // TODO: Custom string parsing such as project->issue->subtask->employee->worklog
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  NOCHARGE
}

enum RoundingScheme {
  POINT
  POINTPOINT
  POINTPOINTPOINT
}

model Invoice {
  id String @id @default(cuid())
  name String
  status InvoiceStatus @default(DRAFT)
  invoiceNumber Int
  currency Currency @default(USD)
  roundingScheme RoundingScheme @default(POINTPOINT)
  invoicedFrom DateTime
  invoicedTo DateTime
  issueDate DateTime
  dueDate DateTime
  clientName String
  client Client @relation(fields: [clientName, organizationId], references: [name, organizationId])
  timeItems TimeItem[]
  fixedPriceTimeItems FixedPriceTimeItem[]
  taxes Tax[]
  discounts Discount[]
  fixedPriceDiscounts FixedPriceDiscount[]
  notesForClient String
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  @@unique ([id, organizationId], name: "organizationsInvoice")
}

// Issue Invoice
model IssueTimeItem {
  id String @id @default(cuid())
  jiraId String
  jiraKey String
  name String
  hours Decimal
  updatedHoursSpent Decimal
  discountPercentage Decimal
  issueInvoiceId IssueInvoice @relation(fields: [id], references: [id])
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
}

model IssueInvoice {
  id String @id @default(cuid())
  name String
  currency Currency @default(USD)
  roundingScheme RoundingScheme @default(POINTPOINT)
  issueDate DateTime
  dueDate DateTime
  clientName String
  economicCustomer String
  economicCustomerPrice Decimal
  economicText1 String
  economicOurReference String
  economicCustomerContact String
  issueTimeItems IssueTimeItem[]
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  @@unique ([id, organizationId], name: "organizationsIssueInvoice")
}

// Xero
model XeroAuthenticationKey {
  id String @id @default(cuid())
  organizationId String @unique
  organization Organization[]
  idToken String @db.Text() // Token id is too long to store in a string, so it's stored in a SQL text instead
  accessToken String @db.Text()
  expiresIn Int
  tokenType String
  refreshToken String @db.Text()
  scope String
}

// Necessary for Next auth
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum UserRoles {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRoles @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?  @updatedAt @default(now())
  accounts      Account[]
  sessions      Session[]
  organizationId  String?
  organization Organization? @relation(fields: [organizationId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}