// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


// ----- Comment in for SQLITE -----
// generator client {
//     provider = "prisma-client-js"
// }

// datasource db {
//     provider = "sqlite"
//     url      = "file:./db.sqlite"
// }

// ----- Comment in for MySQL -----
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

model ApiKey {
    id String @id @default(cuid())
    provider String // e.g E-conomic
    key String // e.g. economic-api-key
    value String // e.g. jsj3hdo3eds0
    userId String
    user User @relation(fields: [userId], references: [id])
    @@unique(fields: [key, userId], name: "usersApiKey")
}

model Worklog {
  id String @id @default(cuid())
  worklogId String
  issueId String
  hours Decimal
  started DateTime
  billed Boolean?
  billedDate DateTime?
  userId String
  user User @relation(fields: [userId], references: [id])
  // @@unique([worklogId, userId])
  @@unique(fields: [worklogId, userId], name: "usersWorklog")
}

// Necessary for Next auth
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  apiKeys       ApiKey[]
  worklog       Worklog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}