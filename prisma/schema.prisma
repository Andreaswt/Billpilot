// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// ----- Comment in for MySQL -----
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  //shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

model Organization {
    id String @id @default(cuid())
    users User[]
    name String
    description String?
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    apiKeys ApiKey[]
    worklog Worklog[]
    roles Role[]
    pricelists Pricelist[]
    projects Project[]
    teamSchemes TeamScheme[]
    jiraEmployees JiraEmployee[]
    currencyName String?
    currency Currency? @relation(fields: [currencyName], references: [currency])
}

model ApiKey {
    id String @id @default(cuid())
    provider String // e.g E-conomic
    key String // e.g. economic-api-key
    value String // e.g. jsj3hdo3eds0
    organizationId String
    organization Organization @relation(fields: [organizationId], references: [id])
    @@unique(fields: [key, organizationId], name: "organizationsApiKey")
}

model Worklog {
  id String @id @default(cuid())
  worklogId String
  issueId String
  hours Decimal
  started DateTime
  billed Boolean?
  billedDate DateTime?
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  @@unique(fields: [worklogId, organizationId], name: "organizationsWorklog")
}

// Roles and pricelists
model Role {
  name String @id @unique
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  pricelists RolesOnPricelists[]
  jiraEmployees JiraEmployee[]
  teamSchemes TeamScheme[]
}

model Pricelist {
  name String @id @unique
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  roles RolesOnPricelists[]
}

model RolesOnPricelists {
  role       Role     @relation(fields: [roleName], references: [name])
  roleName     String
  pricelist   Pricelist @relation(fields: [pricelistName], references: [name])
  pricelistName String
  hourlyRate Decimal
  @@id([roleName, pricelistName])
}

model Currency {
  currency String @id @unique
  abbreviation String
  Organization Organization[]
}

model Project {
  key String
  name String
  billable Boolean
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  @@unique([key, organizationId])
}

// Team schemes
// A team scheme can have multiple roles, and a role can have multiple employees (implicit many-to-many)
// A role can have multiple employees, and an employee can have multiple roles (implicit many-to-many)

model TeamScheme {
  id String @id @default(cuid())
  name String
  roles Role[]
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
}

model JiraEmployee {
  id String @id @default(cuid())
  name String
  accountId String
  roles Role[]
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  @@unique ([accountId, organizationId], name: "organizationsJiraEmployee")
}

// Necessary for Next auth
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  organizationId  String
  organization Organization @relation(fields: [organizationId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}