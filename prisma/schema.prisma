// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

model Organization {
    id String @id @default(cuid())
    users User[]
    name String?
    description String?
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    apiKeys ApiKey[]
    worklog Worklog[]
    clients Client[]
    currency Currency @default(USD)
    roundingScheme RoundingScheme @default(POINTPOINT)

    // General invoice models
    generalInvoices GeneralInvoice[]
    economicInvoiceOptions EconomicInvoiceOptions[]
    invoiceLines InvoiceLine[]
}

enum ApiKeyProvider {
  JIRA
  ECONOMIC
  XERO
  QUICKBOOKS
  ASANA
  HUBSPOT
}

enum ApiKeyName {
  ECONOMICAGREEMENTGRANTTOKEN
  JIRAACCESSTOKEN
  JIRAREFRESHTOKEN
  JIRAREQUESTURL
  HUBSPOTACCESSTOKEN
  HUBSPOTREFRESHTOKEN
}

model ApiKey {
    id String @id @default(cuid())
    provider ApiKeyProvider
    key ApiKeyName
    value String @db.Text()
    expires DateTime?
    organizationId String
    organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    @@unique(fields: [provider, key, organizationId], name: "organizationsApiKey")
}

model Worklog {
  id String @id @default(cuid())
  worklogId String
  issueId String
  hours Decimal
  started DateTime
  billed Boolean?
  billedDate DateTime?
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  @@unique(fields: [worklogId, organizationId], name: "organizationsWorklog")
}

enum ClientStatus {
  BILLED
  NOTBILLED
}

model Client {
  id String @id @default(cuid())
  name String
  currency Currency @default(USD)
  roundingScheme RoundingScheme @default(POINTPOINT)
  createdAt DateTime @default(now())
  latestBill DateTime?
  status ClientStatus @default(NOTBILLED)
  pricePerHour Decimal

  // Options for specific providers
  economicOptions EconomicInvoiceOptions?

  invoiceTemplates InvoiceTemplate[]

  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  @@unique ([id, organizationId], name: "organizationsClient")
}

enum Currency {
  USD
  DKK
}

enum RoundingScheme {
  POINT
  POINTPOINT
  POINTPOINTPOINT
}

model InvoiceLine {
  id String @id @default(cuid())
  title String
  hours Decimal
  pricePerHour Decimal
  updatedHoursSpent Decimal
  discountPercentage Decimal

  generalInvoiceId String
  generalInvoice GeneralInvoice @relation(fields: [generalInvoiceId], references: [id])

  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model GeneralInvoice {
  id String @id @default(cuid())
  title String
  description String
  pricePerHour Decimal

  // invoiceType InvoiceType @default(GENERAL)
  currency Currency @default(USD)
  roundingScheme RoundingScheme @default(POINTPOINT)

  invoiceLines InvoiceLine[]

  invoicedFrom DateTime?
  invoicedTo DateTime?
  issueDate DateTime @default(now())
  dueDate DateTime

  // Invoice options for specific providers
  economicOptions EconomicInvoiceOptions?

  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model EconomicInvoiceOptions {
  id String @id @default(cuid())
  customer String
  text1 String
  ourReference String
  customerContact String
  unit String
  layout String
  vatZone String
  paymentTerms String
  product String

  clientId String? @unique
  client Client? @relation(fields: [clientId], references: [id], onDelete: Cascade)

  generalInvoiceId String? @unique
  generalInvoice GeneralInvoice? @relation(fields: [generalInvoiceId], references: [id], onDelete: Cascade)

  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

// Templating
model InvoiceTemplate {
  id String @id @default(cuid())
  clientId String
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  active Boolean

  // Fields
  filters InvoiceTemplateFilter[]
  invoiceTemplateFixedPriceTimeItems InvoiceTemplateFixedPriceTimeItem[]
}

enum InvoiceTemplateFilterTypes {
  JIRAPROJECT
  JIRAEMPLOYEE
}

model InvoiceTemplateFilter {
  id String @id @default(cuid())
  name String
  filterId String
  type InvoiceTemplateFilterTypes

  invoiceTemplateId String
  invoiceTemplate InvoiceTemplate @relation(fields: [invoiceTemplateId], references: [id], onDelete: Cascade)
}

model InvoiceTemplateFixedPriceTimeItem {
  id String @id @default(cuid())
  name String
  amount Decimal

  invoiceTemplateId String
  invoiceTemplate InvoiceTemplate @relation(fields: [invoiceTemplateId], references: [id], onDelete: Cascade)
}


// Necessary for Next auth
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum UserRoles {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRoles @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?  @updatedAt @default(now())
  accounts      Account[]
  sessions      Session[]
  organizationId  String?
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}